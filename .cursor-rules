# Architecture Frontend - Beenaya ERP

## Structure des dossiers
- Suivre strictement la structure de fichiers définie
- Respecter la séparation des préoccupations entre les dossiers
- Chaque feature doit être isolée dans son propre dossier
- Les composants réutilisables vont dans /components
- Les fonctions utilitaires vont dans /utils
- Les services API vont dans /services

## Conventions de nommage
- Utiliser PascalCase pour les composants React
- Utiliser camelCase pour les variables, fonctions et méthodes
- Utiliser kebab-case pour les noms de fichiers et dossiers
- Utiliser UPPERCASE pour les constantes et variables d'environnement
- Les fichiers de composants React doivent avoir l'extension .tsx
- Les fichiers de logique pure doivent avoir l'extension .ts

## Organisation des features
- Chaque feature doit avoir son propre dossier dans /features
- Exporter tous les composants publics d'une feature via un index.ts
- Préfixer les hooks spécifiques à une feature avec "use[FeatureName]"
- Préfixer les services spécifiques à une feature avec "[featureName]Service"
- Inclure les types spécifiques à une feature dans un fichier [featureName].types.ts

## Composants
- Séparer les composants par responsabilité
- Un composant par fichier
- Utiliser les props typées avec TypeScript
- Préférer les functional components avec hooks
- Garder les composants petits et concentrés sur une seule tâche
- Créer des composants atomiques dans /components
- Chaque composant doit être documenté avec JSDoc

## Services API
- Centraliser la configuration API dans /services/api/client.ts
- Créer un service dédié par domaine fonctionnel
- Gérer les erreurs API de manière centralisée
- Utiliser des intercepteurs pour l'authentification
- Typer toutes les réponses API

## State Management
- Isolation du state par feature
- Éviter les states globaux autant que possible
- Utiliser des custom hooks pour encapsuler la logique d'état
- Documenter les stores avec des commentaires explicatifs

## Styles
- Utiliser des styles modulaires (CSS Modules ou styled-components)
- Définir les variables et thèmes globaux dans /theme
- Rendre tous les composants responsifs
- Favoriser l'utilisation de designs system cohérents

## Typescript
- Typer strictement toutes les variables et fonctions
- Éviter l'utilisation de "any"
- Créer des interfaces/types dédiés pour chaque modèle de données
- Utiliser des types génériques pour les composants réutilisables
- Utiliser les enums pour les valeurs prédéfinies

## Performances
- Mettre en place le code splitting
- Optimiser les imports
- Utiliser React.memo pour les composants purement fonctionnels
- Optimiser les re-renders avec useMemo et useCallback
- Éviter les calculs inutiles dans les renders

## Tests
- Écrire des tests pour les fonctionnalités critiques
- Suivre une approche de test par comportement
- Utiliser des tests unitaires pour les fonctions utilitaires
- Utiliser des tests d'intégration pour les workflows importants

## Internationalisation
- Toutes les chaînes de caractères doivent être externalisées pour i18n
- Pas de texte en dur dans les composants
- Utiliser des clés de traduction sémantiques 

/src
  /assets                # Images, icônes, polices, fichiers statiques
    /images              # Images et photos
    /icons               # Icônes SVG/PNG
    /fonts               # Polices personnalisées
  
  /components            # Composants UI réutilisables
    /buttons             # Boutons variés (primary, secondary, etc.)
    /forms               # Éléments de formulaire (inputs, selects, etc.)
    /layout              # Composants de mise en page (container, grid, etc.)
    /modals              # Fenêtres modales et dialogs
    /navigation          # Menus, navbar, sidebar, etc.
    /tables              # Tableaux et listes
    /cards               # Cartes et conteneurs visuels
    /feedback            # Notifications, alertes, toasts, etc.
    /loaders             # Indicateurs de chargement
  
  /features              # Domaines fonctionnels (feature folders)
    /home                # Page d'accueil (landing page)
      HomePage.tsx
      HeroSection.tsx
      FeaturesList.tsx
      Testimonials.tsx
      PricingSection.tsx
      index.ts
    
    /auth                # Authentification
      LoginPage.tsx
      RegisterPage.tsx
      ForgotPasswordPage.tsx
      useAuth.ts
      authService.ts
      auth.types.ts
      index.ts
    
    /dashboard           # Tableau de bord
      DashboardPage.tsx
      StatisticsWidget.tsx
      RecentChantiers.tsx
      ActivityFeed.tsx
      useDashboard.ts
      dashboardService.ts
      dashboard.types.ts
      index.ts
    
    /chantiers           # Gestion des chantiers
      ChantiersList.tsx
      ChantierDetails.tsx
      ChantierForm.tsx
      ChantierTimeline.tsx
      ChantierGallery.tsx
      useChantiers.ts
      chantierService.ts
      chantier.types.ts
      index.ts
    
    /quotes              # Devis & factures
      QuotesList.tsx
      QuoteDetails.tsx
      QuoteForm.tsx
      InvoiceGenerator.tsx
      useQuotes.ts
      quoteService.ts
      quote.types.ts
      index.ts
    
    /clients             # Gestion des clients
      ClientsList.tsx
      ClientDetails.tsx
      ClientForm.tsx
      useClients.ts
      clientService.ts
      client.types.ts
      index.ts
    
    /suppliers           # Gestion des fournisseurs
      SuppliersList.tsx
      SupplierDetails.tsx
      SupplierForm.tsx
      useSuppliers.ts
      supplierService.ts
      supplier.types.ts
      index.ts
    
    /reports             # Rapports & statistiques
      ReportsPage.tsx
      ChartComponent.tsx
      ReportGenerator.tsx
      ExportOptions.tsx
      useReports.ts
      reportService.ts
      report.types.ts
      index.ts
    
    /settings            # Paramètres
      SettingsPage.tsx
      ProfileSettings.tsx
      CompanySettings.tsx
      NotificationSettings.tsx
      useSettings.ts
      settingsService.ts
      settings.types.ts
      index.ts
  
  /hooks                 # Custom React hooks
    useForm.ts
    useToast.ts
    useModal.ts
    useApi.ts
    useLocalStorage.ts
    useResponsive.ts
  
  /layouts               # Layouts de pages
    MainLayout.tsx       # Layout principal avec sidebar, navbar, etc.
    AuthLayout.tsx       # Layout pour pages d'authentification
    LandingLayout.tsx    # Layout pour page d'accueil
  
  /pages                 # Pages principales (si routing basé sur pages)
    index.tsx
    login.tsx
    dashboard.tsx
    etc.
  
  /routes                # Configuration des routes
    index.ts
    PrivateRoute.tsx
    PublicRoute.tsx
    RouteConfig.ts
  
  /services              # Services API et intégrations
    /api
      client.ts          # Configuration Axios/Fetch
      authInterceptor.ts # Gestion des tokens
      errorHandler.ts    # Gestion centralisée des erreurs
    /endpoints
      chantierService.ts
      clientService.ts
      authService.ts
      quoteService.ts
      etc.
  
  /store                 # State management
    /slices              # Slices Redux (si Redux)
    /context             # React Context (si Context API)
    store.ts             # Configuration du store
  
  /types                 # Types et interfaces partagés
    common.types.ts      # Types communs (ID, Pagination, etc.)
    api.types.ts         # Types pour les réponses API
    models.types.ts      # Types des modèles de données
  
  /utils                 # Fonctions utilitaires
    date.utils.ts        # Fonctions de manipulation de dates
    string.utils.ts      # Fonctions de manipulation de chaînes
    number.utils.ts      # Fonctions de calcul et formatage
    validation.utils.ts  # Fonctions de validation
    format.utils.ts      # Fonctions de formatage (devise, numéros, etc.)
  
  /constants             # Constantes globales
    routes.constants.ts  # Routes de l'application
    api.constants.ts     # Endpoints API
    ui.constants.ts      # Constantes UI (breakpoints, etc.)
    status.constants.ts  # Statuts, rôles, enums
  
  /theme                 # Configuration du thème
    theme.ts             # Thème principal
    colors.ts            # Palette de couleurs
    typography.ts        # Configuration typographique
    breakpoints.ts       # Points de rupture responsive
    GlobalStyles.tsx     # Styles globaux
  
  /i18n                  # Internationalisation
    /locales             # Fichiers de traduction
      fr.json
      en.json
    i18n.config.ts       # Configuration i18n
  
  /tests                 # Tests
    /unit                # Tests unitaires
    /integration         # Tests d'intégration
    /mocks               # Données mockées pour tests
    setup.ts             # Configuration des tests
  
  App.tsx                # Composant principal
  main.tsx               # Point d'entrée (bootstrap)
  index.html             # Template HTML
  vite-env.d.ts          # Types pour Vite (si Vite)
  
/.cursor-rules           # Règles d'architecture
/package.json            # Dépendances et scripts
/tsconfig.json           # Configuration TypeScript
/vite.config.ts          # Configuration Vite (ou autre bundler)
/.eslintrc.js            # Configuration ESLint
/.prettierrc             # Configuration Prettier